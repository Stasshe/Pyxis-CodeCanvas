export const initialFileContents = {
  '.gitignore': {
    type: 'file',
    content:
      '# 依存関係\nnode_modules/\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# ビルド出力\ndist/\nbuild/\n\n# 環境変数\n.env\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\n',
  },
  'README.md': {
    type: 'file',
    content:
      '# プロジェクトへようこそ\n\nこのプロジェクトはPyxisで作成されました。\n\n---\n\n## 使い方例\n\n### Node.js コード例\n\x60\x60\x60javascript\nconst fs = require(\'fs\');\nfs.writeFileSync(\'hello.txt\', \'Pyxisからこんにちは！\');\nconst content = fs.readFileSync(\'hello.txt\', \'utf8\');\nconsole.log(content);\n\x60\x60\x60\n\n### LaTeX 数式例\n$\nE = mc^2\n$\n$\nx = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}\n$\n\n### 複数モニター・テーマ変更\n- 設定パネルから「テーマカラー」「個別色設定」を変更できます。\n\n### ファイル操作\n- ファイルツリーでドラッグ＆ドロップや右クリックで新規作成・削除・リネーム可能。\n- インポート/エクスポートでローカルファイルの追加やダウンロードもできます。\n\n### Git 操作例\n\x60\x60\x60bash\n# ファイル追加\ngit add .\n# コミット\ngit commit -m "初期コミット"\n# ブランチ作成・切替\ngit checkout -b feature/new-feature\n# マージ\ngit merge feature/new-feature\n# diff\ngit diff [branchName]\n\x60\x60\x60\n\n\n### WebPreview機能でのリアルタイムプレビュー\nPyxisでは、\x60homepage\x60 や \x60text-editor\x60 フォルダなど、Webアプリのエントリポイントとなるフォルダを長押し（または右クリック）し、「WebPreview」を選択することで、埋め込みiframe内でリアルタイムにサイトをプレビューできます。\n\n\n---\n\n## Mermaid記法のリアルタイム編集\n\x60\x60\x60mermaid\ngraph TB\n    subgraph "ブラウザ IndexedDB"\n        subgraph "pyxis-fs (lightning-fs)"\n            GitFS[Git仮想ファイルシステム]\n            GitObjects[.git/objects/]\n            GitRefs[.git/refs/]\n            GitHead[.git/HEAD]\n            GitIndex[.git/index]\n        end\n        \n        subgraph "PyxisProjects"\n            Projects[projects テーブル]\n            Files[files テーブル]\n        end\n    end\n    \n    subgraph "React メモリ状態"\n        ProjectFiles[projectFiles state]\n        Tabs[tabs state]\n        ActiveTab[activeTabId state]\n        NodeRuntimeFlag[nodeRuntimeOperationInProgress]\n    end\n    \n    subgraph "UI コンポーネント"\n        Terminal[Terminal.tsx]\n        FileTree[FileTree.tsx]\n        Editor[CodeEditor.tsx]\n        RunPanel[RunPanel.tsx]\n    end\n    \n    GitFS --> Terminal\n    Projects --> ProjectFiles\n    Files --> ProjectFiles\n    ProjectFiles --> FileTree\n    ProjectFiles --> Tabs\n    Tabs --> Editor\n    \n    Terminal --> GitFS\n    Editor --> Tabs\n    RunPanel --> GitFS\n    RunPanel --> Files\n\x60\x60\x60\n---\n\n## よく使うコマンド\n- \x60ls\x60, \x60cd\x60, \x60cat\x60, \x60touch\x60, \x60mkdir\x60, \x60rm\x60, \x60cp\x60, \x60mv\x60, \x60echo\x60, \x60clear\x60\n- 詳細は \x60/docs/unix-commands.md\x60 を参照\n\n## 便利機能\n- LaTeXプレビュー\n- 複数モニター対応\n- テーマカラー変更\n- ファイルのインポート/ダウンロード\n- Git/プロジェクトファイルのダウンロード\n- Mermaid記法のリアルタイム編集\n\n## 新機能\n\n#### AI Agent (Edit/Ask)\n- AIと対話してコードの編集や質問が可能。\n\n#### iframeを用いたHMRライクな開発環境\n- 埋め込みiframe内でリアルタイムに変更をプレビュー可能。(ファイル一覧から、WebPreviewを押してください)\n\n#### インポート機能の強化\n- zipファイル、画像、PDFなどのバッファコンテンツをインポート可能。\n- unzipコマンド対応でファイルを展開可能。\n---\n\n> Pyxisで快適な開発をお楽しみください！\n',
  },
  'docs': {
    type: 'folder',
    children: {
      'docs_git-commands.md': {
        type: 'file',
        content:
          '# Gitコマンドの使い方\n\nPyxisでは以下のGitコマンドが利用できます。\n\n- **git init**: 新しいリポジトリを初期化\n  - プロジェクトの初期化は「プロジェクト管理」ボタンから行います。\n- **git add [ファイル]**: ファイルをステージに追加\n  - \x60git add .\x60 で全ファイルを追加可能\n  - \x60git add *\x60 でカレントディレクトリのファイルを追加可能\n- **git commit -m "メッセージ"**: 変更をコミット\n  - \x60-m\x60 フラグでメッセージを指定\n- **git status**: 現在の状態を表示\n- **git log**: コミット履歴を表示\n- **git branch**: ブランチ一覧を表示\n  - \x60git branch -d [ブランチ名]\x60 でブランチ削除\n- **git checkout [ブランチ名]**: ブランチを切り替え\n  - \x60git checkout -b [新ブランチ名]\x60 で新しいブランチを作成して切り替え\n- **git merge [ブランチ名]**: ブランチをマージ\n  - \x60--no-ff\x60 オプションでFast-forwardを無効にしてマージ可能\n  - \x60--abort\x60 でマージを中止\n- **git reset --hard [コミットID]**: 指定コミットまで巻き戻し\n  - \x60git reset\x60 で全ファイルをアンステージング\n  - \x60git reset [ファイル]\x60 で特定ファイルをアンステージング\n- **git revert [コミットID]**: 指定コミットを打ち消すコミットを作成\n- **git diff**: 変更差分を表示\n  - \x60git diff\x60 でワーキングディレクトリの変更を表示\n  - \x60git diff --staged\x60 でステージされた変更を表示\n  - \x60git diff [コミット1] [コミット2]\x60 でコミット間の差分を表示\n\n詳細は画面のGitパネルやヒストリーをご参照ください。\n',
      },
      'getting-started.md': {
        type: 'file',
        content:
          '# スタートガイド\n\nこのプロジェクトの使用方法について説明します。\n\n1. コードエディタでファイルを編集\n2. ターミナルでコマンド実行\n3. Gitパネルで履歴管理\n',
      },
      'unix-commands.md': {
        type: 'file',
        content:
          '# ターミナルで使えるUnixコマンド\n\nPyxisのターミナルでは以下のコマンドが利用できます（一部制限あり）。\n\n- **ls**: ディレクトリの内容を表示\n- **cd [ディレクトリ]**: ディレクトリを移動\n  - 引数なしで実行するとプロジェクトルートに移動\n- **pwd**: 現在のパスを表示\n- **cat [ファイル]**: ファイルの内容を表示\n- **touch [ファイル]**: 空ファイルを作成\n- **mkdir [ディレクトリ]**: ディレクトリを作成\n  - \x60-p\x60 オプションで親ディレクトリも同時に作成可能\n- **rm [ファイル/ディレクトリ]**: ファイルやディレクトリを削除\n  - \x60-r\x60 または \x60-rf\x60 オプションでディレクトリを再帰的に削除\n- **cp [元] [先]**: ファイルをコピー\n- **mv [元] [先]**: ファイルを移動/リネーム\n- **echo [文字列]**: 文字列を表示\n  - \x60>\x60 を使用してファイルにリダイレクト可能\n- **clear**: 画面をクリア\n\n※ npmコマンドは現在開発中です。\n\n詳細はターミナルで**help**コマンドを実行してください。\n',
      },
    },
  },
  'homepage': {
    type: 'folder',
    children: {
      'index.html': {
        type: 'file',
        content:
          '<!DOCTYPE html>\n<html lang="ja">\n\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Pyxis - セットアップゼロ。素早く起動、気軽にコーディング</title>\n  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>\n  <link href="style.css" rel="stylesheet">\n</head>\n\n<body>\n  <script src="main.js"></script>\n  <!-- Particle Background -->\n  <div class="particles" id="particles"></div>\n\n  <!-- Navigation -->\n  <nav class="nav">\n    <div class="container">\n      <div class="nav-content">\n        <div class="logo">🌟 Pyxis</div>\n        <ul class="nav-links">\n          <li><a href="#home">ホーム</a></li>\n          <li><a href="#features">機能</a></li>\n          <li><a href="#screenshots">スクリーンショット</a></li>\n          <li><a href="#about">について</a></li>\n        </ul>\n      </div>\n    </div>\n  </nav>\n\n  <!-- Hero Section -->\n  <section id="home" class="hero">\n    <div class="floating-shapes">\n      <div class="shape shape1"></div>\n      <div class="shape shape2"></div>\n      <div class="shape shape3"></div>\n    </div>\n    <div class="container">\n      <div class="hero-content">\n        <h1 class="hero-title">Pyxis</h1>\n        <p class="hero-subtitle">セットアップゼロ。素早く起動、気軽にコーディング</p>\n        <p style="color: rgba(255,255,255,0.7); margin-bottom: 40px; font-size: 1.1rem;">\n          完全な開発環境がブラウザで瞬時に起動。ダウンロード不要、インストール不要、サーバー接続不要。\n        </p>\n        <a href="https://pyxis-code.onrender.com" class="cta-button">\n          🚀 今すぐ試す\n        </a>\n      </div>\n    </div>\n  </section>\n\n  <!-- Features Section -->\n  <section id="features" class="section">\n    <div class="container">\n      <h2 class="section-title reveal">革新的な機能</h2>\n\n      <div class="features-grid">\n        <div class="feature-card reveal">\n          <div class="feature-icon">⚡</div>\n          <h3 class="feature-title">ホットモジュール リプレースメント</h3>\n          <p class="feature-description">\n            コードをタイプするとリアルタイムでブラウザが更新。簡易サイトを素早く構築できて、環境整備の面倒もなし。\n          </p>\n        </div>\n\n        <div class="feature-card reveal">\n          <div class="feature-icon">📝</div>\n          <h3 class="feature-title">Markdown・Mermaid・LaTeX</h3>\n          <p class="feature-description">\n            美しいドキュメントをライブプレビューで作成。Mermaidでフローチャート、LaTeXで数式、全てリアルタイム更新。\n          </p>\n        </div>\n\n        <div class="feature-card reveal">\n          <div class="feature-icon">🔄</div>\n          <h3 class="feature-title">ビジュアル Git</h3>\n          <p class="feature-description">\n            コードの変更をgitビジュアル差分で確認。完全なGitサポートでブランチ、マージ、履歴管理。安全なGit学習環境。\n          </p>\n        </div>\n\n        <div class="feature-card reveal">\n          <div class="feature-icon">🚀</div>\n          <h3 class="feature-title">Node.js ランタイム</h3>\n          <p class="feature-description">\n            ブラウザで本物のNode.jsコードが動く。ファイル操作、readline、多くのnpmモジュールが動作。実行までの時間も高速。\n          </p>\n        </div>\n\n        <div class="feature-card reveal">\n          <div class="feature-icon">🔍</div>\n          <h3 class="feature-title">スマートファイル操作</h3>\n          <p class="feature-description">\n            VS Code並みの効率性でプロジェクトをナビゲート。高速ファイル検索、インテリジェントなオートコンプリート。\n          </p>\n        </div>\n\n        <div class="feature-card reveal">\n          <div class="feature-icon">🤖</div>\n          <h3 class="feature-title">AI搭載</h3>\n          <p class="feature-description">\n            Ask & Edit機能で何度もChatGPTにコピペする必要なし。シームレス統合でコーディング環境に直接組み込み。\n          </p>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Screenshot Section -->\n  <section id="screenshots" class="section screenshot-section">\n    <div class="container">\n      <h2 class="section-title reveal">実際の動作画面</h2>\n\n      <div class="screenshot-gallery">\n        <div class="screenshot-card reveal">\n          <img src="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor/raw/main/readme-assets/IMG_1465.png" alt="HMR動作画面" onerror="this.style.display=\'none\';">\n          <div class="card-content">\n            <h3>🔥 リアルタイム編集</h3>\n            <p>コードの変更が即座にブラウザに反映される魔法のような体験</p>\n          </div>\n        </div>\n\n        <div class="screenshot-card reveal">\n          <img src="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor/raw/main/readme-assets/IMG_1470.png" alt="リッチコンテンツ編集" onerror="this.style.display=\'none\';">\n          <div class="card-content">\n            <h3>📊 リッチコンテンツ</h3>\n            <p>Markdown、Mermaid図表、LaTeX数式を同時にライブプレビュー</p>\n          </div>\n        </div>\n\n        <div class="screenshot-card reveal">\n          <img src="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor/raw/main/readme-assets/IMG_1466.png" alt="Git差分可視化" onerror="this.style.display=\'none\';">\n          <div class="card-content">\n            <h3>🔄 Git可視化</h3>\n            <p>美しいビジュアル差分でコードの変更を一目で把握</p>\n          </div>\n        </div>\n\n        <div class="screenshot-card reveal">\n          <img src="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor/raw/main/readme-assets/IMG_1469.png" alt="Node.js実行画面" onerror="this.style.display=\'none\';">\n          <div class="card-content">\n            <h3>⚡ Node.js パワー</h3>\n            <p>ブラウザ内で完全なNode.js環境を実現</p>\n          </div>\n        </div>\n\n        <div class="screenshot-card reveal">\n          <img src="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor/raw/main/readme-assets/IMG_1467.png" alt="ファイル操作" onerror="this.style.display=\'none\';">\n          <div class="card-content">\n            <h3>📁 高速ナビゲーション</h3>\n            <p>直感的なファイル操作とプロジェクト管理</p>\n          </div>\n        </div>\n\n        <div class="screenshot-card reveal">\n          <img src="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor/raw/main/readme-assets/IMG_1473.png" alt="カバー画像" onerror="this.style.display=\'none\';">\n          <div class="card-content">\n            <h3>✨ 統合開発環境</h3>\n            <p>すべての機能が美しく統合された開発体験</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Stats Section -->\n  <section class="section stats-section">\n    <div class="container">\n      <div class="stats-grid">\n        <div class="stat-item">\n          <div class="stat-number" data-target="0">0</div>\n          <div class="stat-label">秒で起動</div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-number" data-target="100">0</div>\n          <div class="stat-label">% ブラウザ互換</div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-number" data-target="1">0</div>\n          <div class="stat-label">MB 軽量バンドル</div>\n        </div>\n        <div class="stat-item">\n          <div class="stat-number" data-target="24">0</div>\n          <div class="stat-label">時間 いつでも利用</div>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- About Section -->\n  <section id="about" class="section">\n    <div class="container">\n      <h2 class="section-title reveal">なぜPyxisなのか？</h2>\n\n      <div\n        style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 40px; margin-top: 60px;">\n        <div class="reveal">\n          <div style="text-align: center; padding: 40px;">\n            <div style="font-size: 4rem; margin-bottom: 20px;">⚡</div>\n            <h3 style="font-size: 1.8rem; margin-bottom: 15px;">超高速起動</h3>\n            <p style="color: var(--text-secondary); line-height: 1.8;">\n              サーバーなし、ローディング画面なし。静的ホスティングでまばたきより速く読み込み、思考の速度でコーディング。\n            </p>\n          </div>\n        </div>\n\n        <div class="reveal">\n          <div style="text-align: center; padding: 40px;">\n            <div style="font-size: 4rem; margin-bottom: 20px;">🛡️</div>\n            <h3 style="font-size: 1.8rem; margin-bottom: 15px;">100% 安全</h3>\n            <p style="color: var(--text-secondary); line-height: 1.8;">\n              サンドボックス環境で恐れることなく自由に実験。何をしても壊れない、初心者のGitとコーディング学習に最適。\n            </p>\n          </div>\n        </div>\n\n        <div class="reveal">\n          <div style="text-align: center; padding: 40px;">\n            <div style="font-size: 4rem; margin-bottom: 20px;">📱</div>\n            <h3 style="font-size: 1.8rem; margin-bottom: 15px;">iPad ファースト</h3>\n            <p style="color: var(--text-secondary); line-height: 1.8;">\n              iPad で設計された究極のモバイルコーディング体験。タッチ最適化インターフェースとデュアルエディター対応。\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div class="code-animation reveal"\n        style="margin-top: 60px; max-width: 600px; margin-left: auto; margin-right: auto;">\n        <div style="color: #888; margin-bottom: 10px;">// 実際に動くNode.jsコード例</div>\n        <div class="code-line" style="color: #ff6b9d;">const fs = require(\'fs\');</div>\n        <div class="code-line" style="color: #c792ea;">const readline = require(\'readline\');</div>\n        <div class="code-line" style="color: #82aaff;"></div>\n        <div class="code-line" style="color: #ffcb6b;">fs.writeFileSync(\'hello.txt\', \'Pyxisからこんにちは！\');</div>\n        <div class="code-line" style="color: #c3e88d;">console.log(\'Pyxisへようこそ！ 🌟\');</div>\n        <div class="typing-cursor"></div>\n      </div>\n    </div>\n  </section>\n\n  <!-- CTA Section -->\n  <section class="section cta-section">\n    <div class="container">\n      <div class="cta-content reveal">\n        <h2 class="cta-title">制限なしのコーディングを始めよう</h2>\n        <p class="cta-description">\n          ダウンロード不要。セットアップ不要。純粋なコーディング体験をお楽しみください。\n        </p>\n        <a href="https://pyxis-code.onrender.com" class="cta-button" style="margin-right: 20px;">\n          ✨ Pyxis を起動\n        </a>\n        <a href="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor" class="cta-button"\n          style="background: transparent; border: 2px solid rgba(255,255,255,0.3);">\n          <i class="fab fa-github"></i> GitHub\n        </a>\n      </div>\n    </div>\n  </section>\n\n  <!-- Footer -->\n  <footer class="footer">\n    <div class="container">\n      <div class="footer-content">\n        <div style="color: var(--text-secondary);">\n          © 2025 Pyxis. Made with ❤️ for developers everywhere.\n        </div>\n        <ul class="footer-links">\n          <li><a href="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor">GitHub</a></li>\n          <li><a href="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor/blob/main/LICENSE">License</a></li>\n          <li><a href="https://github.com/Stasshe/Pyxis-Client-Side-Code-Editor/issues">Issues</a></li>\n        </ul>\n      </div>\n    </div>\n  </footer>\n</body>\n\n</html>\n',
      },
      'main.js': {
        type: 'file',
        content:
          "// Particle System\nfunction createParticles() {\n  const particlesContainer = document.getElementById('particles');\n  const particleCount = 50;\n\n  for (let i = 0; i < particleCount; i++) {\n    const particle = document.createElement('div');\n    particle.className = 'particle';\n    particle.style.left = Math.random() * 100 + '%';\n    particle.style.top = Math.random() * 100 + '%';\n\n    // Random animation\n    anime({\n      targets: particle,\n      translateX: () => anime.random(-50, 50),\n      translateY: () => anime.random(-50, 50),\n      opacity: [0, 1, 0],\n      duration: anime.random(3000, 6000),\n      loop: true,\n      easing: 'easeInOutSine'\n    });\n\n    particlesContainer.appendChild(particle);\n  }\n}\n\n// Floating shapes animation\nfunction animateShapes() {\n  anime({\n    targets: '.shape1',\n    translateY: [-20, 20],\n    rotate: [0, 360],\n    duration: 8000,\n    loop: true,\n    easing: 'easeInOutSine'\n  });\n\n  anime({\n    targets: '.shape2',\n    translateX: [-15, 15],\n    translateY: [10, -10],\n    duration: 6000,\n    loop: true,\n    easing: 'easeInOutSine'\n  });\n\n  anime({\n    targets: '.shape3',\n    scale: [1, 1.2, 1],\n    duration: 4000,\n    loop: true,\n    easing: 'easeInOutSine'\n  });\n}\n\n// Hero entrance animation\nfunction animateHero() {\n  const tl = anime.timeline({\n    easing: 'easeOutExpo',\n  });\n\n  tl.add({\n    targets: '.hero-title',\n    translateY: [100, 0],\n    opacity: [0, 1],\n    duration: 1200,\n  }).add({\n    targets: '.hero-subtitle',\n    translateY: [50, 0],\n    opacity: [0, 1],\n    duration: 800,\n    offset: '-=800'\n  }).add({\n    targets: '.hero-content p',\n    translateY: [30, 0],\n    opacity: [0, 1],\n    duration: 600,\n    offset: '-=400'\n  }).add({\n    targets: '.cta-button',\n    scale: [0, 1],\n    opacity: [0, 1],\n    duration: 600,\n    offset: '-=200'\n  });\n}\n\n// Scroll reveal animation\nfunction animateOnScroll() {\n  const reveals = document.querySelectorAll('.reveal');\n\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        entry.target.classList.add('active');\n\n        anime({\n          targets: entry.target,\n          translateY: [50, 0],\n          opacity: [0, 1],\n          duration: 800,\n          easing: 'easeOutCubic'\n        });\n      }\n    });\n  }, { threshold: 0.1 });\n\n  reveals.forEach(reveal => observer.observe(reveal));\n}\n\n// Feature cards hover animation\nfunction animateFeatureCards() {\n  const cards = document.querySelectorAll('.feature-card');\n\n  cards.forEach(card => {\n    card.addEventListener('mouseenter', () => {\n      anime({\n        targets: card.querySelector('.feature-icon'),\n        scale: [1, 1.2],\n        rotate: [0, 5],\n        duration: 300,\n        easing: 'easeOutCubic'\n      });\n    });\n\n    card.addEventListener('mouseleave', () => {\n      anime({\n        targets: card.querySelector('.feature-icon'),\n        scale: [1.2, 1],\n        rotate: [5, 0],\n        duration: 300,\n        easing: 'easeOutCubic'\n      });\n    });\n  });\n}\n\n// Stats counter animation\nfunction animateStats() {\n  const statNumbers = document.querySelectorAll('.stat-number');\n\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        const target = entry.target;\n        const finalValue = parseInt(target.dataset.target);\n\n        anime({\n          targets: target,\n          innerHTML: [0, finalValue],\n          round: 1,\n          duration: 2000,\n          easing: 'easeOutCubic',\n          opacity: [0, 1],\n          update: function (anim) {\n            target.innerHTML = Math.round(anim.animatables[0].target.innerHTML);\n          }\n        });\n      }\n    });\n  }, { threshold: 0.5 });\n\n  statNumbers.forEach(stat => observer.observe(stat));\n}\n\n// Code typing animation\nfunction animateCode() {\n  const codeLines = document.querySelectorAll('.code-line');\n\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        codeLines.forEach((line, index) => {\n          anime({\n            targets: line,\n            translateX: [0, 0],\n            opacity: [0, 1],\n            duration: 800,\n            delay: index * 200,\n            easing: 'easeOutCubic'\n          });\n        });\n      }\n    });\n  }, { threshold: 0.5 });\n\n  const codeContainer = document.querySelector('.code-animation');\n  if (codeContainer) observer.observe(codeContainer);\n}\n\n// Screenshot cards stagger animation\nfunction animateScreenshots() {\n  const cards = document.querySelectorAll('.screenshot-card');\n\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        anime({\n          targets: cards,\n          translateY: [30, 0],\n          opacity: [0, 1],\n          delay: anime.stagger(100),\n          duration: 600,\n          easing: 'easeOutCubic'\n        });\n      }\n    });\n  }, { threshold: 0.2 });\n\n  if (cards.length > 0) observer.observe(cards[0]);\n}\n\n// Smooth scrolling for navigation\nfunction initSmoothScroll() {\n  const navLinks = document.querySelectorAll('.nav-links a');\n\n  navLinks.forEach(link => {\n    link.addEventListener('click', (e) => {\n      e.preventDefault();\n      const targetId = link.getAttribute('href');\n      const targetSection = document.querySelector(targetId);\n\n      if (targetSection) {\n        const offsetTop = targetSection.offsetTop - 80;\n\n        anime({\n          targets: document.documentElement,\n          scrollTop: offsetTop,\n          duration: 800,\n          easing: 'easeInOutCubic'\n        });\n      }\n    });\n  });\n}\n\n// CTA button pulse animation\nfunction animateCTAButton() {\n  const ctaButtons = document.querySelectorAll('.cta-button');\n\n  ctaButtons.forEach(button => {\n    anime({\n      targets: button,\n      boxShadow: [\n        '0 10px 30px rgba(102, 126, 234, 0.3)',\n        '0 15px 40px rgba(102, 126, 234, 0.5)',\n        '0 10px 30px rgba(102, 126, 234, 0.3)'\n      ],\n      duration: 2000,\n      loop: true,\n      easing: 'easeInOutSine'\n    });\n  });\n}\n\n// Navigation background on scroll\nfunction animateNavOnScroll() {\n  const nav = document.querySelector('.nav');\n  let lastScrollY = window.scrollY;\n\n  window.addEventListener('scroll', () => {\n    if (window.scrollY > 100) {\n      nav.style.background = 'rgba(10, 14, 39, 0.95)';\n    } else {\n      nav.style.background = 'rgba(10, 14, 39, 0.9)';\n    }\n\n    // Hide nav on scroll down, show on scroll up\n    if (window.scrollY > lastScrollY && window.scrollY > 200) {\n      anime({\n        targets: nav,\n        translateY: -100,\n        duration: 300,\n        easing: 'easeOutCubic'\n      });\n    } else {\n      anime({\n        targets: nav,\n        translateY: 0,\n        duration: 300,\n        easing: 'easeOutCubic'\n      });\n    }\n\n    lastScrollY = window.scrollY;\n  });\n}\n\n// Page load animations\nfunction initPageAnimations() {\n  // Create loading screen\n  const loader = document.createElement('div');\n  loader.style.cssText = \x60\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: var(--dark-bg);\n                z-index: 9999;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                flex-direction: column;\n            \x60;\n\n  const loaderText = document.createElement('div');\n  loaderText.innerHTML = '🌟 Pyxis';\n  loaderText.style.cssText = \x60\n                font-size: 3rem;\n                font-weight: 800;\n                background: var(--primary-gradient);\n                -webkit-background-clip: text;\n                -webkit-text-fill-color: transparent;\n                background-clip: text;\n                margin-bottom: 20px;\n            \x60;\n\n  const loaderSubtext = document.createElement('div');\n  loaderSubtext.innerHTML = '起動中...';\n  loaderSubtext.style.cssText = \x60\n                font-size: 1.2rem;\n                color: var(--text-secondary);\n                opacity: 0;\n            \x60;\n\n  loader.appendChild(loaderText);\n  loader.appendChild(loaderSubtext);\n  document.body.appendChild(loader);\n\n  // Animate loader\n  anime({\n    targets: loaderText,\n    scale: [0, 1],\n    opacity: [0, 1],\n    duration: 800,\n    easing: 'easeOutCubic'\n  });\n\n  anime({\n    targets: loaderSubtext,\n    opacity: [0, 1],\n    duration: 600,\n    delay: 400,\n    easing: 'easeOutCubic'\n  });\n\n  // Remove loader after delay\n  setTimeout(() => {\n    anime({\n      targets: loader,\n      opacity: [1, 0],\n      duration: 500,\n      easing: 'easeOutCubic',\n      complete: () => {\n        document.body.removeChild(loader);\n        animateHero();\n      }\n    });\n  }, 1500);\n}\n\n// Initialize all animations when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  initPageAnimations();\n  createParticles();\n  animateShapes();\n  animateOnScroll();\n  animateFeatureCards();\n  animateStats();\n  animateCode();\n  animateScreenshots();\n  initSmoothScroll();\n  animateCTAButton();\n  animateNavOnScroll();\n});\n\n// Add some interactive elements\ndocument.addEventListener('mousemove', (e) => {\n  const shapes = document.querySelectorAll('.shape');\n  const mouseX = e.clientX / window.innerWidth;\n  const mouseY = e.clientY / window.innerHeight;\n\n  shapes.forEach((shape, index) => {\n    const speed = (index + 1) * 0.5;\n    const x = (mouseX - 0.5) * speed * 20;\n    const y = (mouseY - 0.5) * speed * 20;\n\n    anime({\n      targets: shape,\n      translateX: x,\n      translateY: y,\n      duration: 1000,\n      easing: 'easeOutCubic'\n    });\n  });\n});\n\n// Add easter egg - konami code\nlet konamiCode = [];\nconst konamiSequence = ['ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight', 'KeyB', 'KeyA'];\n\ndocument.addEventListener('keydown', (e) => {\n  konamiCode.push(e.code);\n  if (konamiCode.length > konamiSequence.length) {\n    konamiCode.shift();\n  }\n\n  if (JSON.stringify(konamiCode) === JSON.stringify(konamiSequence)) {\n    // Easter egg animation\n    const particles = document.querySelectorAll('.particle');\n    anime({\n      targets: particles,\n      scale: [1, 3, 1],\n      rotate: [0, 360],\n      backgroundColor: [\n        'rgba(255, 255, 255, 0.1)',\n        'rgba(255, 107, 157, 0.8)',\n        'rgba(102, 126, 234, 0.8)',\n        'rgba(255, 255, 255, 0.1)'\n      ],\n      duration: 2000,\n      delay: anime.stagger(50),\n      easing: 'easeInOutSine'\n    });\n\n    // Show secret message\n    const secretMsg = document.createElement('div');\n    secretMsg.innerHTML = '🎉 コナミコード発見！Pyxisの隠し機能アクティブ！';\n    secretMsg.style.cssText = \x60\n                    position: fixed;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                    background: var(--primary-gradient);\n                    padding: 20px 40px;\n                    border-radius: 50px;\n                    color: white;\n                    font-weight: 600;\n                    z-index: 10000;\n                    font-size: 1.2rem;\n                    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);\n                \x60;\n\n    document.body.appendChild(secretMsg);\n\n    anime({\n      targets: secretMsg,\n      scale: [0, 1],\n      opacity: [0, 1],\n      duration: 500,\n      easing: 'easeOutCubic',\n      complete: () => {\n        setTimeout(() => {\n          anime({\n            targets: secretMsg,\n            scale: [1, 0],\n            opacity: [1, 0],\n            duration: 500,\n            easing: 'easeInCubic',\n            complete: () => document.body.removeChild(secretMsg)\n          });\n        }, 3000);\n      }\n    });\n\n    konamiCode = [];\n  }\n});",
      },
      'style.css': {
        type: 'file',
        content:
          "* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n:root {\n    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n    --accent-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n    --dark-bg: #0a0e27;\n    --card-bg: rgba(255, 255, 255, 0.05);\n    --glass-bg: rgba(255, 255, 255, 0.1);\n    --text-primary: #ffffff;\n    --text-secondary: rgba(255, 255, 255, 0.8);\n}\n\nbody {\n    font-family: 'SF Pro Display', 'Inter', sans-serif;\n    background: var(--dark-bg);\n    color: var(--text-primary);\n    overflow-x: hidden;\n    line-height: 1.6;\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n}\n\n/* Navigation */\n.nav {\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: 1000;\n    background: rgba(10, 14, 39, 0.9);\n    backdrop-filter: blur(20px);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.nav-content {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 15px 0;\n}\n\n.logo {\n    font-size: 1.8rem;\n    font-weight: 700;\n    background: var(--primary-gradient);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.nav-links {\n    display: flex;\n    gap: 30px;\n    list-style: none;\n}\n\n.nav-links a {\n    color: var(--text-secondary);\n    text-decoration: none;\n    font-weight: 500;\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.nav-links a:hover {\n    color: var(--text-primary);\n    transform: translateY(-2px);\n}\n\n/* Hero Section */\n.hero {\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    overflow: hidden;\n}\n\n.hero-bg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.1;\n}\n\n.floating-shapes {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n}\n\n.shape {\n    position: absolute;\n    border-radius: 50%;\n    opacity: 0.1;\n}\n\n.shape1 {\n    width: 300px;\n    height: 300px;\n    background: var(--primary-gradient);\n    top: 10%;\n    left: 10%;\n}\n\n.shape2 {\n    width: 200px;\n    height: 200px;\n    background: var(--secondary-gradient);\n    top: 60%;\n    right: 15%;\n}\n\n.shape3 {\n    width: 150px;\n    height: 150px;\n    background: var(--accent-gradient);\n    bottom: 20%;\n    left: 20%;\n}\n\n.hero-content {\n    text-align: center;\n    z-index: 2;\n    max-width: 800px;\n}\n\n.hero-title {\n    font-size: 4.5rem;\n    font-weight: 800;\n    margin-bottom: 20px;\n    background: var(--primary-gradient);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    line-height: 1.2;\n}\n\n.hero-subtitle {\n    font-size: 1.5rem;\n    color: var(--text-secondary);\n    margin-bottom: 40px;\n    font-weight: 300;\n}\n\n.cta-button {\n    display: inline-block;\n    padding: 18px 40px;\n    background: var(--primary-gradient);\n    color: white;\n    text-decoration: none;\n    border-radius: 50px;\n    font-weight: 600;\n    font-size: 1.1rem;\n    transition: all 0.3s ease;\n    box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);\n}\n\n.cta-button:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4);\n}\n\n/* Features Section */\n.section {\n    padding: 100px 0;\n    position: relative;\n}\n\n.section-title {\n    text-align: center;\n    font-size: 3rem;\n    font-weight: 700;\n    margin-bottom: 60px;\n}\n\n.features-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n    gap: 40px;\n    margin-top: 60px;\n}\n\n.feature-card {\n    background: var(--glass-bg);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 20px;\n    padding: 40px;\n    backdrop-filter: blur(20px);\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n}\n\n.feature-card:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);\n    border-color: rgba(255, 255, 255, 0.2);\n}\n\n.feature-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: var(--primary-gradient);\n    transform: scaleX(0);\n    transition: transform 0.3s ease;\n}\n\n.feature-card:hover::before {\n    transform: scaleX(1);\n}\n\n.feature-icon {\n    font-size: 3rem;\n    margin-bottom: 20px;\n    background: var(--primary-gradient);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.feature-title {\n    font-size: 1.8rem;\n    font-weight: 600;\n    margin-bottom: 15px;\n}\n\n.feature-description {\n    color: var(--text-secondary);\n    line-height: 1.8;\n}\n\n/* Screenshot Section */\n.screenshot-section {\n    background: rgba(255, 255, 255, 0.02);\n}\n\n.screenshot-gallery {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 30px;\n    margin-top: 60px;\n}\n\n.screenshot-card {\n    border-radius: 15px;\n    overflow: hidden;\n    background: var(--glass-bg);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    transition: all 0.3s ease;\n}\n\n.screenshot-card:hover {\n    transform: scale(1.05);\n    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);\n}\n\n.screenshot-card img {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n}\n\n.screenshot-card .card-content {\n    padding: 20px;\n}\n\n.screenshot-card h3 {\n    font-size: 1.3rem;\n    margin-bottom: 10px;\n}\n\n.screenshot-card p {\n    color: var(--text-secondary);\n    font-size: 0.9rem;\n}\n\n/* Stats Section */\n.stats-section {\n    background: var(--primary-gradient);\n    position: relative;\n    overflow: hidden;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 40px;\n    text-align: center;\n}\n\n.stat-item {\n    padding: 20px;\n}\n\n.stat-number {\n    font-size: 3rem;\n    font-weight: 800;\n    margin-bottom: 10px;\n    opacity: 0;\n}\n\n.stat-label {\n    font-size: 1.1rem;\n    opacity: 0.9;\n}\n\n/* CTA Section */\n.cta-section {\n    background: var(--dark-bg);\n    text-align: center;\n    position: relative;\n}\n\n.cta-content {\n    max-width: 600px;\n    margin: 0 auto;\n}\n\n.cta-title {\n    font-size: 2.5rem;\n    font-weight: 700;\n    margin-bottom: 20px;\n}\n\n.cta-description {\n    font-size: 1.2rem;\n    color: var(--text-secondary);\n    margin-bottom: 40px;\n}\n\n/* Footer */\n.footer {\n    background: rgba(0, 0, 0, 0.5);\n    padding: 40px 0;\n    text-align: center;\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.footer-content {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 20px;\n}\n\n.footer-links {\n    display: flex;\n    gap: 30px;\n    list-style: none;\n}\n\n.footer-links a {\n    color: var(--text-secondary);\n    text-decoration: none;\n    transition: color 0.3s ease;\n}\n\n.footer-links a:hover {\n    color: var(--text-primary);\n}\n\n/* Mobile Responsive */\n@media (max-width: 768px) {\n    .nav-links {\n        display: none;\n    }\n\n    .hero-title {\n        font-size: 3rem;\n    }\n\n    .hero-subtitle {\n        font-size: 1.2rem;\n    }\n\n    .section-title {\n        font-size: 2.2rem;\n    }\n\n    .features-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .footer-content {\n        flex-direction: column;\n        text-align: center;\n    }\n}\n\n/* Scroll Reveal */\n.reveal {\n    opacity: 0;\n    transform: translateY(50px);\n}\n\n.reveal.active {\n    opacity: 1;\n    transform: translateY(0);\n}\n\n/* Code Animation */\n.code-animation {\n    background: #1e1e2e;\n    border-radius: 10px;\n    padding: 20px;\n    margin: 20px 0;\n    font-family: 'Fira Code', monospace;\n    font-size: 14px;\n    overflow: hidden;\n    position: relative;\n}\n\n.code-line {\n    opacity: 0;\n    transform: translateX(-20px);\n}\n\n.typing-cursor {\n    display: inline-block;\n    width: 2px;\n    height: 20px;\n    background: #00f2fe;\n    animation: blink 1s infinite;\n}\n\n@keyframes blink {\n\n    0%,\n    50% {\n        opacity: 1;\n    }\n\n    51%,\n    100% {\n        opacity: 0;\n    }\n}\n\n/* Particle Background */\n.particles {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: -1;\n}\n\n.particle {\n    position: absolute;\n    width: 2px;\n    height: 2px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 50%;\n}\n",
      },
    },
  },
  'src': {
    type: 'folder',
    children: {
      'debugConsoleDemo.js': {
        type: 'file',
        content:
          'const readline = require(\'readline\').createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nconst colors = {\n  reset: "\\x1b[0m",\n  bright: "\\x1b[1m",\n  dim: "\\x1b[2m",\n  underscore: "\\x1b[4m",\n  blink: "\\x1b[5m",\n  reverse: "\\x1b[7m",\n  fg: {\n    black: "\\x1b[30m",\n    red: "\\x1b[31m",\n    green: "\\x1b[32m",\n    yellow: "\\x1b[33m",\n    blue: "\\x1b[34m",\n    magenta: "\\x1b[35m",\n    cyan: "\\x1b[36m",\n    white: "\\x1b[37m",\n    gray: "\\x1b[90m",\n  },\n  bg: {\n    black: "\\x1b[40m",\n    red: "\\x1b[41m",\n    green: "\\x1b[42m",\n    yellow: "\\x1b[43m",\n    blue: "\\x1b[44m",\n    magenta: "\\x1b[45m",\n    cyan: "\\x1b[46m",\n    white: "\\x1b[47m",\n    gray: "\\x1b[100m",\n  }\n};\n\nreadline.question(\'あなたの名前を入力してください (Enter your name): \', name => {\n  console.log(\x60${colors.fg.green}こんにちは, ${name}!${colors.reset}\x60);\n  console.log(\x60${colors.bg.blue}これは背景色が青色のメッセージです。${colors.reset}\x60);\n  console.log(\x60${colors.fg.red}${colors.bright}これは明るい赤色のテキストです。${colors.reset}\x60);\n  console.log(\x60${colors.underscore}下線付きテキスト${colors.reset}\x60);\n  console.log(\x60${colors.reverse}反転テキスト${colors.reset}\x60);\n\n  //セッション終了\n  readline.close();\n});\n',
      },
      'fibonacci.py': {
        type: 'file',
        content:
          '"""\nThis script provides three functionalities:\n1. Calculate the factorial of a number.\n2. Check if a number is a prime number.\n3. Generate a Fibonacci sequence up to a given number.\n"""\n\ndef factorial(n):\n    """Calculate the factorial of a number."""\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef is_prime(num):\n    """Check if a number is a prime number."""\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    """Generate a Fibonacci sequence up to the nth number."""\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence\n\n# Example usage\nif __name__ == "__main__":\n    # Factorial\n    num = 5\n    print(f"The factorial of {num} is {factorial(num)}")\n\n    # Prime check\n    prime_candidate = 29\n    print(f"Is {prime_candidate} a prime number? {\'Yes\' if is_prime(prime_candidate) else \'No\'}")\n\n    # Fibonacci sequence\n    fib_count = 10\n    print(f"The first {fib_count} numbers in the Fibonacci sequence are: {fibonacci(fib_count)}")\n',
      },
      'fileOperationg.js': {
        type: 'file',
        content:
          "const fs = require('fs').promises;\nconst triviaList = [\n  'カンガルーの赤ちゃんは生まれたとき2cmしかない！',\n  '富士山は1707年に噴火している！',\n  'バナナは実はベリー類に分類される！',\n  '日本では縦書きが一般的だけど、横書きの起源はタイプライターにあると言われてる！'\n];\n\nasync function saveRandomTrivia() {\n  const randomTrivia = triviaList[Math.floor(Math.random() * triviaList.length)];\n  const data = { date: new Date().toISOString(), trivia: randomTrivia };\n  try {\n    await fs.writeFile('trivia.json', JSON.stringify(data, null, 2), 'utf8');\n    console.log('今日の豆知識を保存しました:');\n    console.log(randomTrivia);\n  } catch (error) {\n    console.error('保存中にエラーが発生しました:', error.message);\n  }\n}\n\nsaveRandomTrivia();\n",
      },
      'index.js': {
        type: 'file',
        content:
          '// メインエントリーポイント\nconsole.log("Hello, World!");\n\n// 配列処理の例\nconst arr = [1, 2, 3, 4];\nconst squared = arr.map(x => x * x);\nconsole.log("二乗した配列:", squared);\n\n// 非同期処理の例\nasync function getData() {\n  return await new Promise(res => setTimeout(() => res("1秒経ちました。"), 1000));\n}\ngetData().then(console.log);\n\n// プロジェクトのコードをここに記述してください\n',
      },
      'readline_test.js': {
        type: 'file',
        content:
          "const readline = require('readline');\n\nconsole.log('🚀 ReadLine モジュールテスト開始');\n\n// 基本的なインターフェース\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: 'REPL> ',\n  historySize: 100,\n  removeHistoryDuplicates: true\n});\n\nconsole.log('✅ インターフェース作成完了');\n\n// まず履歴に何かを追加するためのテスト質問\nconsole.log('📝 最初の質問');\nrl.question('最初の質問 - 何か入力してください: ', (answer1) => {\n  console.log(\x60入力1: \"${answer1}\"\x60);\n  console.log('📋 現在の履歴:', rl.getHistory());\n  \n  console.log('📝 二番目の質問');\n  rl.question('二番目の質問 - 別の何かを入力してください: ', (answer2) => {\n    console.log(\x60入力2: \"${answer2}\"\x60);\n    console.log('📋 現在の履歴:', rl.getHistory());\n    \n    console.log('🎯 カーソル制御テスト開始');\n    \n    // カーソル制御テスト\n    console.log('移動前の位置');\n    const result1 = readline.cursorTo(process.stdout, 10, 5);\n    console.log('カーソル移動結果:', result1);\n    \n    const result2 = readline.clearLine(process.stdout, 0);\n    console.log('行クリア結果:', result2);\n    \n    console.log('カーソル制御完了');\n    \n    // 履歴クリアテスト\n    console.log('🗑️ 履歴クリア前:', rl.getHistory());\n    rl.clearHistory();\n    console.log('🗑️ 履歴クリア後:', rl.getHistory());\n    \n    rl.close();\n    console.log('🏁 テスト完了');\n  });\n});\n\n  rl.setPrompt('Enter a command (type \"exit\" to quit): ');\n  rl.prompt();\n\n  rl.on('line', (input) => {\n    const command = input.trim();\n    \n    if (command === 'exit') {\n      console.log('Goodbye!');\n      rl.close();\n      return;\n    }\n    \n    if (command === 'hello') {\n      console.log('Hello there!');\n    } else if (command === 'time') {\n      console.log('Current time:', new Date().toLocaleString());\n    } else if (command === 'help') {\n      console.log('Available commands: hello, time, help, exit');\n    } else if (command === '') {\n      // 空の入力は無視\n    } else {\n      console.log(\x60Unknown command: ${command}. Type \"help\" for available commands.\x60);\n    }\n    \n    rl.prompt();\n  });\n\n  rl.on('close', () => {\n    console.log('Interface closed');\n  });\n\n\n// プロンプトテスト\nasync function promptTest() {\n  console.log('\\n=== Promise-based Question Test ===');\n  \n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n\n  try {\n    const name = await rl.questionAsync('Enter your name: ');\n    const age = await rl.questionAsync('Enter your age: ');\n    const city = await rl.questionAsync('Enter your city: ');\n    \n    console.log(\x60\\nProfile:\x60);\n    console.log(\x60Name: ${name}\x60);\n    console.log(\x60Age: ${age}\x60);\n    console.log(\x60City: ${city}\x60);\n    \n    rl.close();\n  } catch (error) {\n    console.error('Error during input:', error);\n    rl.close();\n  }\n}\n\n// メイン実行\nasync function main() {\n  console.log('Choose a test:');\n  console.log('1. Basic question test');\n  console.log('2. Interactive interface test');\n  console.log('3. Promise-based questions test');\n  \n  const choice = await readline.question('Enter your choice (1-3): ');\n  \n  switch (choice.trim()) {\n    case '1':\n      await basicTest();\n      break;\n    case '2':\n      await interfaceTest();\n      break;\n    case '3':\n      await promptTest();\n      break;\n    default:\n      console.log('Invalid choice. Running basic test...');\n      await basicTest();\n      break;\n  }\n  \n  console.log('\\nTest completed!');\n}\n\n// テスト実行\nmain().catch(console.error);\n",
      },
    },
  },
  'text-editor': {
    type: 'folder',
    children: {
      'index.html': {
        type: 'file',
        content:
          '<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Professional Text Editor</title>\n    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">\n    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">\n    <link rel="stylesheet" href="style.css">\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.css">\n</head>\n<body>\n    <div class="d-flex flex-column vh-100">\n        <header class="bg-primary text-white text-center py-3">\n            <h1>Text Editor</h1>\n        </header>\n        <div class="d-flex flex-grow-1">\n            <aside class="bg-light border-end p-3" id="sidebar">\n                <input type="file" id="fileInput" class="form-control mb-3" multiple>\n                <div id="fileList" class="border rounded p-2"></div>\n            </aside>\n            <main class="flex-grow-1 d-flex flex-column">\n                <div class="bg-secondary text-white p-2 d-flex justify-content-between align-items-center">\n                    <button id="saveBtn" class="btn btn-light btn-sm"><i class="fas fa-save"></i> Save</button>\n                    <button id="themeToggle" class="btn btn-light btn-sm"><i class="fas fa-adjust"></i> Toggle Theme</button>\n                </div>\n                <textarea id="editor" class="flex-grow-1"></textarea>\n            </main>\n        </div>\n        <footer class="bg-light text-center py-2">\n            <p>&copy; 2025 Professional Text Editor</p>\n        </footer>\n    </div>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.js"></script>\n    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/javascript/javascript.min.js"></script>\n    <script src="main.js"></script>\n</body>\n</html>\n',
      },
      'main.js': {
        type: 'file',
        content:
          "document.getElementById('fileInput').addEventListener('change', handleFileSelect);\nconst fileList = document.getElementById('fileList');\nconst editor = CodeMirror.fromTextArea(document.getElementById('editor'), {\n    lineNumbers: true,\n    mode: 'javascript',\n    theme: 'default'\n});\nconst saveBtn = document.getElementById('saveBtn');\nconst themeToggle = document.getElementById('themeToggle');\n\nfunction handleFileSelect(event) {\n    const files = event.target.files;\n    fileList.innerHTML = '';\n\n    Array.from(files).forEach((file, index) => {\n        const listItem = document.createElement('div');\n        listItem.className = 'file-item';\n        listItem.textContent = file.name;\n        listItem.addEventListener('click', () => loadFileContent(file));\n        fileList.appendChild(listItem);\n    });\n}\n\nfunction loadFileContent(file) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n        editor.setValue(e.target.result);\n    };\n    reader.readAsText(file);\n}\n\nfunction saveFile() {\n    const blob = new Blob([editor.getValue()], { type: 'text/plain' });\n    const a = document.createElement('a');\n    a.href = URL.createObjectURL(blob);\n    a.download = 'edited-file.txt';\n    a.click();\n}\n\nsaveBtn.addEventListener('click', saveFile);\n\nthemeToggle.addEventListener('click', () => {\n    document.body.classList.toggle('dark-mode');\n    editor.setOption('theme', document.body.classList.contains('dark-mode') ? 'darcula' : 'default');\n});\n\ndocument.addEventListener('keydown', (e) => {\n    if (e.ctrlKey && e.key === 's') {\n        e.preventDefault();\n        saveFile();\n    }\n});\n",
      },
      'style.css': {
        type: 'file',
        content:
          'body {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: Arial, sans-serif;\n}\n\n.d-flex {\n    display: flex;\n}\n\n.flex-column {\n    flex-direction: column;\n}\n\n.flex-grow-1 {\n    flex-grow: 1;\n}\n\n.vh-100 {\n    height: 100vh;\n}\n\nheader {\n    flex-shrink: 0;\n}\n\nfooter {\n    flex-shrink: 0;\n}\n\naside {\n    width: 250px;\n    flex-shrink: 0;\n    overflow-y: auto;\n}\n\nmain {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n}\n\ntextarea#editor {\n    flex-grow: 1;\n    width: 100%;\n    border: none;\n    resize: none;\n    padding: 10px;\n    font-size: 16px;\n    font-family: monospace;\n    box-sizing: border-box;\n}\n\n.file-item {\n    cursor: pointer;\n    padding: 5px;\n    border-bottom: 1px solid #ddd;\n}\n\n.file-item:hover {\n    background-color: #f1f1f1;\n}\n\nfooter {\n    background-color: #f1f1f1;\n    padding: 10px 0;\n    text-align: center;\n}\n\n/* Dark Theme */\nbody.dark-mode {\n    background-color: #121212;\n    color: #e0e0e0;\n}\n\nbody.dark-mode header {\n    background-color: #1f1f1f;\n}\n\nbody.dark-mode aside {\n    background-color: #1f1f1f;\n    color: #e0e0e0;\n}\n\nbody.dark-mode footer {\n    background-color: #1f1f1f;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    aside {\n        width: 200px;\n    }\n\n    textarea#editor {\n        font-size: 14px;\n    }\n}\n\n@media (max-width: 576px) {\n    .d-flex {\n        flex-direction: column;\n    }\n\n    aside {\n        width: 100%;\n        border-right: none;\n        border-bottom: 1px solid #ddd;\n    }\n}\n',
      },
    },
  },
};
