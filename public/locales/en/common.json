{
  "app": {
    "name": "Pyxis CodeCanvas",
    "tagline": "Browser-based Code Editor"
  },
  "action": {
    "save": "Save",
    "cancel": "Cancel",
    "delete": "Delete",
    "create": "Create",
    "open": "Open",
    "close": "Close",
    "confirm": "Confirm",
    "edit": "Edit",
    "add": "Add",
    "remove": "Remove",
    "refresh": "Refresh",
    "search": "Search",
    "clear": "Clear",
    "copy": "Copy",
    "paste": "Paste",
    "cut": "Cut",
    "undo": "Undo",
    "redo": "Redo",
    "loading": "Loading...",
    "authenticating": "Authenticating..."
  },
  "menu": {
    "files": "Files",
    "search": "Search",
    "git": "Git",
    "run": "Run",
    "settings": "Settings",
    "project": "Project Management"
  },
  "file": {
    "new": "New File",
    "newFolder": "New Folder",
    "rename": "Rename",
    "duplicate": "Duplicate",
    "download": "Download",
    "upload": "Upload"
  },
  "auth": {
    "signIn": "Sign In",
    "signOut": "Sign Out",
    "signedInAs": "Signed in as",
    "patPrompt": "GitHub Personal Access Token",
    "patDescription": "<0>Click here</0> to create a PAT (repo scope required)",
    "patPlaceholder": "ghp_xxxxxxxxxxxx",
    "clickToOpenMenu": "Click to open menu",
    "authSuccess": "GitHub authentication successful!",
    "authFailed": "GitHub authentication failed",
    "signOutConfirm": "Are you sure you want to sign out from GitHub?"
  },
  "git": {
    "changes": "Changes",
    "staged": "Staged",
    "unstaged": "Unstaged",
    "commit": "Commit",
    "push": "Push",
    "pull": "Pull",
    "branch": "Branch",
    "merge": "Merge",
    "stash": "Stash",
    "stage": "Stage",
    "unstage": "Unstage",
    "discard": "Discard",
    "commitMessage": "Commit message",
    "generateCommitMessage": "Generate with AI",
    "viewDiff": "View Diff",
    "viewAllDiffs": "View All Diffs",
    "projectSelect": "Please select a project",
    "loadingStatus": "Loading git status...",
    "operationError": "An error occurred while accessing git",
    "errorOccurred": "An error occurred",
    "infoNotAvailable": "Could not fetch git information",
    "apiKeyPlaceholder": "Enter Gemini API key",
    "commitMessagePlaceholder": "Enter commit message...",
    "generating": "Generating...",
    "committing": "Committing...",
    "stageAll": "Stage all",
    "unstageAll": "Unstage all",
    "noChanges": "No changes",
    "deleted": "Deleted",
    "untracked": "Untracked",
    "viewDiffReadonly": "View diff (read-only)",
    "viewDiffEditable": "View diff (editable)",
    "stageDelete": "Stage deletion",
    "restore": "Restore file",
    "deleteUntracked": "Delete file",
    "history": "History",
    "noHistory": "No commit history",
    "commitFailed": "Failed to commit",
    "geminiError": "Gemini API error"
  },
  "editor": {
    "welcome": "Welcome",
    "unsavedChanges": "Unsaved changes",
    "preview": "Preview",
    "split": "Split",
    "closeTab": "Close tab",
    "closeOthers": "Close others",
    "closeAll": "Close all"
  },
  "terminal": {
    "title": "Terminal",
    "clear": "Clear terminal",
    "initializing": "Terminal initializing"
  },
  "output": {
    "title": "Output",
    "noMessages": "No output messages"
  },
  "bottom": {
    "output": "Output",
    "debugConsole": "Debug Console",
    "terminal": "Terminal"
  },
  "right": {
    "aiUnavailable": "AI Assistant is unavailable"
  },
  "ai": {
    "title": "AI Assistant",
    "space": "Space",
    "chat": "Chat",
    "review": "Review",
    "mode": {
      "chat": "Chat",
      "code": "Code",
      "plan": "Plan"
    },
    "context": {
      "add": "Add context",
      "remove": "Remove",
      "select": "Select files"
    },
    "placeholder": "Ask AI assistant..."
  },
  "project": {
    "create": "Create Project",
    "open": "Open Project",
    "delete": "Delete Project",
    "name": "Project Name",
    "description": "Description"
  },
  "run": {
    "title": "Execution Environment",
    "execute": "Execute",
    "stop": "Stop",
    "clearOutput": "Clear output",
    "searchFile": "Search for a file to execute...",
    "noProject": "Open a project to execute Node.js code",
    "inputPlaceholder": "Enter Node.js code...",
    "executeHint": "Press Ctrl+Enter (Cmd+Enter) to execute",
    "outputHint": "When you execute JavaScript/Node.js/Python code, the results will be displayed here. Node.js and js can be executed in the same file.",
    "runtimeNotReady": "Python runtime is not initialized",
    "fileContentError": "Unable to get file content",
    "noOutput": "No output",
    "executionStopped": "Execution stopped",
    "languageNode": "Node.js",
    "languagePython": "Python"
  }
  ,
  "welcome": {
    "title": "Welcome!",
    "indexeddbInfo": "This project's files are stored in IndexedDB.",
    "clientSideNote": "This app runs fully client-side and does not send any data to servers.",
    "hmrHint": "Try HMR and WebPreview by long-pressing the generated homepage folder.",
    "features": {
      "title": "Key features of Pyxis",
      "clientIDE": "Fully client-side IDE (no server required, static hosting)",
      "nodeRuntime": "Node.js runtime, npm, Unix commands and Git available in the browser",
      "monaco": "VS Code-like editing experience with Monaco Editor",
      "gitHistory": "Git history, branch management and commit graph",
      "responsive": "Responsive UI optimized for iPad",
      "languages": "Multi-language highlighting: Cpp, HTML, CSS, JavaScript, Python, etc.",
      "mermaid": "Real-time rendering of flowcharts and sequence diagrams with Mermaid"
    },
    "mainFeatures": {
      "title": "Main features",
      "latex": "LaTeX math rendering and Mermaid/HTML support",
      "importExport": "Import, download files and zip export",
      "theme": "Theme color switching and multi-monitor support",
      "download": "Download Git / project files"
    },
    "specialThanks": {
      "title": "Special Thanks",
      "contributors": "isomorphic-git, Monaco Editor, xterm.js, Mermaid, KaTeX, Pyodide and all OSS contributors.",
      "thanksVisit": "Thank you for visiting!"
    }
  },
  "fileTree": {
    "menu": {
      "createFile": "Create file",
      "createFolder": "Create folder",
      "import": "Import",
      "open": "Open",
      "openPreview": "Open preview",
      "openCodeMirror": "Open in CodeMirror",
      "download": "Download",
      "rename": "Rename",
      "delete": "Delete",
      "webPreview": "WebPreview"
    },
    "prompt": {
      "newFileName": "Enter new file name:",
      "newFolderName": "Enter new folder name:",
      "rename": "Enter new name:"
    },
    "alert": {
      "renameFailed": "Rename failed: {error}"
    }
  }
}
